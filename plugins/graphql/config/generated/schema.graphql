type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subheading: String
  bodycopy: String
}

input ArticleInput {
  title: String
  subheading: String
  bodycopy: String
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createHomeInput {
  data: HomeInput
}

type createHomePayload {
  home: Home
}

input createJobsInput {
  data: JobsInput
}

type createJobsPayload {
  job: Jobs
}

input createPortfolioInput {
  data: PortfolioInput
}

type createPortfolioPayload {
  portfolio: Portfolio
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteHomeInput {
  where: InputID
}

type deleteHomePayload {
  home: Home
}

input deleteJobsInput {
  where: InputID
}

type deleteJobsPayload {
  job: Jobs
}

input deletePortfolioInput {
  where: InputID
}

type deletePortfolioPayload {
  portfolio: Portfolio
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  subheading: String
  bodycopy: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editHomeInput {
  title: String
  subheading: String
}

input editJobsInput {
  title: String
  intro: String
  home: ID
}

input editPortfolioInput {
  title: String
  subheading: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

type Home {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subheading: String
}

input HomeInput {
  title: String
  subheading: String
}

input InputID {
  id: ID!
}

type Jobs {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  intro: String
  home: Home
}

input JobsInput {
  title: String
  intro: String
  home: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | Home | createHomePayload | updateHomePayload | deleteHomePayload | Jobs | createJobsPayload | updateJobsPayload | deleteJobsPayload | Portfolio | createPortfolioPayload | updatePortfolioPayload | deletePortfolioPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createHome(input: createHomeInput): createHomePayload
  updateHome(input: updateHomeInput): updateHomePayload
  deleteHome(input: deleteHomeInput): deleteHomePayload
  createJobs(input: createJobsInput): createJobsPayload
  updateJobs(input: updateJobsInput): updateJobsPayload
  deleteJobs(input: deleteJobsInput): deleteJobsPayload
  createPortfolio(input: createPortfolioInput): createPortfolioPayload
  updatePortfolio(input: updatePortfolioInput): updatePortfolioPayload
  deletePortfolio(input: deletePortfolioInput): deletePortfolioPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Portfolio {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subheading: String
}

input PortfolioInput {
  title: String
  subheading: String
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  home(id: ID!): Home
  homes(sort: String, limit: Int, start: Int, where: JSON): [Home]
  job(id: ID!): Jobs
  jobs(sort: String, limit: Int, start: Int, where: JSON): [Jobs]
  portfolio(id: ID!): Portfolio
  portfolios(sort: String, limit: Int, start: Int, where: JSON): [Portfolio]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateHomeInput {
  where: InputID
  data: editHomeInput
}

type updateHomePayload {
  home: Home
}

input updateJobsInput {
  where: InputID
  data: editJobsInput
}

type updateJobsPayload {
  job: Jobs
}

input updatePortfolioInput {
  where: InputID
  data: editPortfolioInput
}

type updatePortfolioPayload {
  portfolio: Portfolio
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
